version: "3.9"

services:
  # PostgreSQL service
  maomaoworld_postgres:
    image: postgres:14
    container_name: ${POSTGRES_CONTAINER_NAME:-maomaoworld_postgres}
    ports:
      - "8400:${POSTGRES_PORT:-5432}"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - maomaoworld_postgres_data:/var/lib/postgresql/data
      - ./db/sql:/docker-entrypoint-initdb.d
    networks:
      - network
    restart: unless-stopped

  # OpenFGA service
  maomaoworld_openfga:
    image: openfga/openfga:latest
    container_name: ${OPEN_FGA_CONTAINER_NAME:-maomaoworld_openfga}
    command: run
    ports:
      - "8500:${OPEN_FGA_HTTP_PORT:-9000}"
      - "8501:${OPEN_FGA_GRPC_PORT:-9001}"
      - "8502:${OPEN_FGA_PLAYGROUND_PORT:-3000}"
    environment:
      - OPENFGA_STORE_TYPE=postgres
      - OPENFGA_POSTGRES_HOST=maomaoworld_postgres
      - OPENFGA_POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - OPENFGA_POSTGRES_USER=${POSTGRES_USER}
      - OPENFGA_POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - OPENFGA_POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      - maomaoworld_postgres
    networks:
      - network
    restart: unless-stopped

  # Auth service
  auth-server:
    image: maomaoworld_auth:latest
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: ${AUTH_CONTAINER_NAME:-maomaoworld_auth}
    ports:
      - "8300:${AUTH_SERVER_PORT:-8000}"
    environment:
      AUTH_SPRING_APPLICATION_NAME: ${AUTH_SPRING_APPLICATION_NAME}
      AUTH_SPRING_MVC_SERVLET_PATH: ${AUTH_SPRING_MVC_SERVLET_PATH}
      AUTH_SPRING_DATASOURCE_URL: ${AUTH_SPRING_DATASOURCE_URL}
      AUTH_SPRING_DATASOURCE_USERNAME: ${AUTH_SPRING_DATASOURCE_USERNAME}
      AUTH_SPRING_DATASOURCE_PASSWORD: ${AUTH_SPRING_DATASOURCE_PASSWORD}
      AUTH_SPRING_JPA_HIBERNATE_DDL_AUTO: ${AUTH_SPRING_JPA_HIBERNATE_DDL_AUTO}
      AUTH_SPRING_JPA_SHOW_SQL: ${AUTH_SPRING_JPA_SHOW_SQL}
      AUTH_SPRING_DOCKER_COMPOSE_ENABLED: ${AUTH_SPRING_DOCKER_COMPOSE_ENABLED}
      AUTH_SPRING_DOCKER_COMPOSE_FILE: ${AUTH_SPRING_DOCKER_COMPOSE_FILE}
      AUTH_SPRING_DOCKER_COMPOSE_LIFECYCLE_MANAGEMENT: ${AUTH_SPRING_DOCKER_COMPOSE_LIFECYCLE_MANAGEMENT}
      AUTH_LOGGING_LEVEL_ROOT: ${AUTH_LOGGING_LEVEL_ROOT}
      AUTH_LOGGING_LEVEL_DISPATCHER: ${AUTH_LOGGING_LEVEL_DISPATCHER}
      AUTH_JWT_PRIVATE_KEY_PATH: ${AUTH_JWT_PRIVATE_KEY_PATH}
      AUTH_JWT_PUBLIC_KEY_PATH: ${AUTH_JWT_PUBLIC_KEY_PATH}
      AUTH_BOOTSTRAP_USERS_CLEAR: ${AUTH_BOOTSTRAP_USERS_CLEAR}
      AUTH_BOOTSTRAP_USERS_ENABLED: ${AUTH_BOOTSTRAP_USERS_ENABLED}
    depends_on:
      - maomaoworld_postgres
      - maomaoworld_openfga
    networks:
      - network
    restart: unless-stopped

  # Music service
  music-server:
    image: maomaoworld_music:latest
    build:
      context: ./maomao-music
      dockerfile: Dockerfile
    container_name: maomaoworld_music
    ports:
      - "8301:${MUSIC_SERVER_PORT:-7000}"
    environment:
      MUSIC_SPRING_APPLICATION_NAME: ${MUSIC_SPRING_APPLICATION_NAME}
      MUSIC_SPRING_MVC_SERVLET_PATH: ${MUSIC_SPRING_MVC_SERVLET_PATH}
      MUSIC_SERVER_PORT: ${MUSIC_SERVER_PORT}
      MUSIC_LOGGING_LEVEL_ROOT: ${MUSIC_LOGGING_LEVEL_ROOT}
      MUSIC_LOGGING_LEVEL_MAOMAOCLOUD: ${MUSIC_LOGGING_LEVEL_MAOMAOCLOUD}
      MUSIC_LOGGING_LEVEL_LAVALINK: ${MUSIC_LOGGING_LEVEL_LAVALINK}
      MUSIC_LOGGING_LEVEL_HIBERNATE_SQL: ${MUSIC_LOGGING_LEVEL_HIBERNATE_SQL}
      MUSIC_LOGGING_LEVEL_SPRING_WEB: ${MUSIC_LOGGING_LEVEL_SPRING_WEB}
      MUSIC_LOGGING_LEVEL_SPRING_FILTER: ${MUSIC_LOGGING_LEVEL_SPRING_FILTER}
      MUSIC_LOGGING_LEVEL_SECURITY: ${MUSIC_LOGGING_LEVEL_SECURITY}
      MUSIC_LOGGING_LEVEL_SECURITY_ACCESS: ${MUSIC_LOGGING_LEVEL_SECURITY_ACCESS}
      MUSIC_LOGGING_LEVEL_SECURITY_AUTH: ${MUSIC_LOGGING_LEVEL_SECURITY_AUTH}
      MUSIC_LOGGING_LEVEL_SECURITY_OAUTH2: ${MUSIC_LOGGING_LEVEL_SECURITY_OAUTH2}
      MUSIC_DISCORD_TOKEN: ${MUSIC_DISCORD_TOKEN}
      MUSIC_DISCORD_USER_ID: ${MUSIC_DISCORD_USER_ID}
      MUSIC_COMMAND_PREFIX: ${MUSIC_COMMAND_PREFIX}
      MUSIC_LAVALINK_URI: ${MUSIC_LAVALINK_URI}
      MUSIC_LAVALINK_PASSWORD: ${MUSIC_LAVALINK_PASSWORD}
      MUSIC_LAVALINK_NAME: ${MUSIC_LAVALINK_NAME}
      MUSIC_JWKS_ENDPOINT: ${MUSIC_JWKS_ENDPOINT}
      MUSIC_DB_URL: ${MUSIC_DB_URL}
      MUSIC_DB_USER: ${MUSIC_DB_USER}
      MUSIC_DB_PASSWORD: ${MUSIC_DB_PASSWORD}
      MUSIC_JPA_HIBERNATE_DDL_AUTO: ${MUSIC_JPA_HIBERNATE_DDL_AUTO}
      MUSIC_JPA_SCHEMA_MAOMAO_MUSIC: ${MUSIC_JPA_SCHEMA_MAOMAO_MUSIC}
      MUSIC_DOCKER_COMPOSE_ENABLED: ${MUSIC_DOCKER_COMPOSE_ENABLED}
      MUSIC_DOCKER_COMPOSE_FILE: ${MUSIC_DOCKER_COMPOSE_FILE}
      MUSIC_DOCKER_COMPOSE_LIFECYCLE: ${MUSIC_DOCKER_COMPOSE_LIFECYCLE}
      MUSIC_PREMADE_PLAYLISTS_ENABLED: ${MUSIC_PREMADE_PLAYLISTS_ENABLED}
      MUSIC_PREMADE_PLAYLISTS_FILE: ${MUSIC_PREMADE_PLAYLISTS_FILE}
    depends_on:
      - maomaoworld_postgres
      - auth-server
    networks:
      - network
    restart: unless-stopped

  # Web (nginx) server
  web-server:
    image: maomaoworld_web:latest
    build:
      context: ./maomao-web
      dockerfile: Dockerfile
      args:
        VITE_AUTH_API_BASE: ${VITE_AUTH_API_BASE}
        VITE_DISCORD_BOT_API_BASE: ${VITE_DISCORD_BOT_API_BASE}
    container_name: maomaoworld_web
    ports:
      - "8016:${WEB_SERVER_PORT:-80}"
    environment:
      WEB_SERVER_PORT: ${WEB_SERVER_PORT}
      WEB_SERVER_NAME: ${WEB_SERVER_NAME}
      AUTH_SERVER_HOST: ${AUTH_SERVER_HOST}
      MUSIC_SERVER_HOST: ${MUSIC_SERVER_HOST}
      VITE_AUTH_API_BASE: ${VITE_AUTH_API_BASE}
      VITE_DISCORD_BOT_API_BASE: ${VITE_DISCORD_BOT_API_BASE}
    depends_on:
      - auth-server
      - music-server
    networks:
      - network
    restart: unless-stopped

networks:
  network:
    driver: bridge

volumes:
  maomaoworld_postgres_data:
